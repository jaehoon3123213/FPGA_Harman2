`timescale 1ns / 1ps

module rom (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:15];

    initial begin
        //rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _opcode; // R-Type
        // rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1 12+11 =23
        // rom[1] = 32'b0100000_00010_00001_000_00101_0110011; // sub x5, x2, x1 11-12 = -1
        // rom[2] = 32'b0000000_00001_00101_101_00101_0110011; // slu x5, x5 << x1 -1 << 10  
        // rom[3] = 32'b0000000_00101_00000_000_01000_0100011; // m = x5[7:0]
        // rom[4] = 32'b000000001000_00000_000_01000_0000011; //  x5[7:0] = m

        //rom[x]=32'b immm11 _ rs1 _ fun3 _ rd _opcode; // I-Type
        rom[0] = 32'b0000000_01000_00001_000_00010_0010011; //  r2 =8 + r1 
        rom[1] = 32'b0000000_01000_00001_010_00010_0010011; //  r2 = 11 < r1 
        rom[2] = 32'b1000000_01000_00001_011_00010_0010011; //  r2 =-signed < r1 
        rom[3] = 32'b0000000_01000_00001_100_00010_0010011; //  r2 =8 ^ r1 
        rom[4] = 32'b0000000_01000_00001_110_00010_0010011; //  r2 =8 | r1 
        rom[5] = 32'b0000000_01000_00001_111_00010_0010011; //  r2 =8 & r1 
        rom[6] = 32'b0000000_00001_00001_001_00010_0010011; //  r2 =r1 < 1
        rom[7] = 32'b0000000_00001_00001_101_00010_0010011; //  r2 =r1 >> 1 
        rom[8] = 32'b0100000_00011_00001_000_00010_0110011; //  r2 =r1 - r3 
        rom[9] = 32'b0100000_00100_00010_101_00010_0010011; //  r2 =r1 >>> 4 


    end
    assign data = rom[addr[31:2]];
endmodule
