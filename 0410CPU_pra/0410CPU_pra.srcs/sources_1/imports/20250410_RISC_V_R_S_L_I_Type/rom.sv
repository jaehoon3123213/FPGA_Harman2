`timescale 1ns / 1ps

module rom (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:30];

    initial begin
        // rom[0] = 32'b0000000_11110_00001_001_00100_0110011;
        // rom[1] = 32'b0000000_11110_11111_101_00100_0110011;
        // rom[2] = 32'b0100000_11110_11111_101_00100_0110011;

        // //rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _opcode; // R-Type
        // rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1
        // //rom[x]=32'b imm7  _ rs2 _ rs1 _f3 _ imm5_ opcode; // S-Type
        // rom[2] = 32'b0000000_00010_00000_010_01000_0100011; // sw x2, 8(x0);
        // //rom[x]=32'b imm12      _ rs1 _f3 _ rd  _ opcode; // L-Type
        // rom[3] = 32'b000000001000_00000_010_00011_0000011; // lw x3, 8(x0);
        // //rom[x]=32'b imm12      _ rs1 _f3 _ rd  _ opcode; // L-Type
        // rom[4] = 32'b000000001000_00010_000_00110_0010011; // x6, x2, 8; x6 = 20
        // //rom[x]=32'b imm[12][10:5]_rs2_ rs1 _f3 _ rd  _ opcode; // L-Type
        rom[0] = 32'b00000000001000010000100001100011; // x6, x2, 8; x6 = 20
        rom[4] = 32'b00000000001000010001100001100011;// x8 != x2, imm = 10 imode
        rom[5] = 32'b00000000001111111100100001100011; // x8 != x2, imm = 10 imode
        rom[9] = 32'b00000000001111111101100001100011; //bge x31, x3, 16
        rom[10] = 32'b00000000001111111110100001100011; // x8 >= x2, imm = 10 imode
        rom[11] = 32'b00000000001111111111100001100011; // x10 = x2-x8 
        rom[15] = 32'b0000000_00010_01010_100_01000_1100011; // x10 < x2, imm = 10 imode
        rom[17] = 32'b0000000_00010_01010_110_01000_1100011; // x10 < x2, imm = 10 imode unsinged
        // rom[18] = 32'b00000000000000000001_00001_0110111;
        // rom[19] = 32'b00000000000000000001_00001_0010111;
        // rom[20] = 32'b00000000000000001000_00001_1101111;saddsa
        // rom[22] = 32'b00000000000000000001_00001_1100111;

    end
    assign data = rom[addr[31:2]];
endmodule
