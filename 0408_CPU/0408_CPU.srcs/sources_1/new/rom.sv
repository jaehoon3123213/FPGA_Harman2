`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/04/08 16:09:28
// Design Name: 
// Module Name: rom
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module rom(
input logic [31:0] addr,
output logic [31:0] data
    );



logic [31:0] rom [0:15];

initial begin
    //rom[x] = 32'b fun7 _ rs2 _ rs1 _f3 _ rd _opcode; 
    rom[0] = 32'b0000000_00001_00010_000_00100_0110011; //add x4, x2 ,x1
    rom[1] = 32'b0100000_00001_00010_000_00100_0110011; //sub x4, x2 ,x1
    rom[2] = 32'b0000000_00001_00010_001_00100_0110011; //shift x4, x2 ,x1
    rom[3] = 32'b0000000_00001_00010_101_00100_0110011; 
    rom[4] = 32'b0100000_00001_00010_101_00100_0110011; 
    rom[5] = 32'b0000000_00001_00010_010_00100_0110011; 
    rom[6] = 32'b0000000_00001_00010_011_00100_0110011; 
    rom[7] = 32'b0000000_00001_00010_100_00100_0110011; 
    rom[8] = 32'b0000000_00001_00010_110_00100_0110011; 
    rom[9] = 32'b0000000_00001_00010_111_00100_0110011; 
end

assign data = rom[addr[31:2]]; // 4의 배수로 가기 위해 하위 2비트를 지움움
endmodule
